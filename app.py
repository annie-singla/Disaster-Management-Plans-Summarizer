# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10akrDHvjEnG-CoDiG9mZGim-EntZwttb
"""

#!pip install streamlit openai PyPDF2

import streamlit as st
from PyPDF2 import PdfReader
from openai import AzureOpenAI
import textwrap

# Set page config
st.set_page_config(page_title="Disaster Management Plan Summarizer", layout="centered")

# Azure OpenAI settings
API_VERSION = "2024-12-01-preview"
ENDPOINT = "https://ai-gershonavi3238ai913103279029.openai.azure.com/"
DEPLOYMENT = "gpt-35-turbo"
API_KEY = "ETteF1ZBx3xMaD0aE5zkJQTWEMiXH6bWK9HohX0z7Qmf9fqFRNgZJQQJ99BDACHYHv6XJ3w3AAAAACOGvgwJ"

# Initialize OpenAI client
client = AzureOpenAI(
    api_version=API_VERSION,
    azure_endpoint=ENDPOINT,
    api_key=API_KEY,
)

# Helper to chunk text into ~3000 character chunks
def split_text(text, max_tokens=3000):
    paragraphs = text.split('\n')
    chunks, current_chunk = [], ""
    for para in paragraphs:
        if len(current_chunk) + len(para) < max_tokens:
            current_chunk += para + "\n"
        else:
            chunks.append(current_chunk.strip())
            current_chunk = para + "\n"
    if current_chunk:
        chunks.append(current_chunk.strip())
    return chunks

# Summarize each chunk
def summarize_text(text, chunk_id):
    response = client.chat.completions.create(
        model=DEPLOYMENT,
        messages=[
            {"role": "system", "content": "You are an expert in summarizing government disaster management plans."},
            {"role": "user", "content": f"Summarize the following section of a disaster management plan:\n\n{text}"}
        ],
        max_tokens=1024,
        temperature=0.7,
        top_p=1.0
    )
    return response.choices[0].message.content.strip()

# App UI
st.title("📄 Disaster Management Plan Summarizer")
st.write("Upload a PDF and get a clear, concise summary of your disaster management plan.")

pdf = st.file_uploader("Upload PDF", type=["pdf"])

if pdf is not None:
    reader = PdfReader(pdf)
    full_text = ""
    for page in reader.pages:
        full_text += page.extract_text() + "\n"

    st.info("✅ PDF text extracted successfully.")
    chunks = split_text(full_text)

    st.write(f"🔍 Detected **{len(chunks)}** chunks. Starting summarization...")

    summaries = []
    with st.spinner("Summarizing..."):
        for i, chunk in enumerate(chunks):
            st.write(f"📑 Summarizing chunk {i+1}/{len(chunks)}...")
            summary = summarize_text(chunk, i+1)
            summaries.append(summary)

    final_summary = "\n\n".join([f"**Section {i+1} Summary:**\n{summ}" for i, summ in enumerate(summaries)])

    st.subheader("🧾 Final Summary")
    st.markdown(final_summary)

    st.download_button("📥 Download Summary", final_summary, file_name="disaster_summary.txt")

else:
    st.warning("📤 Please upload a PDF document to proceed.")